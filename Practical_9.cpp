#include<iostream>
#include<cmath>
using namespace std;

float NRimplicit1(float h){
    float temp;
    float y[100];
    float y1[51] = {0.8,0.672,0.581683,0.514012,0.46117,0.418635,0.383584,0.354156,0.329071,0.307414,0.288513,0.271865,0.257083,0.243865,0.231971,0.221208,0.211422,0.202482,0.194282,0.186733,0.179759,0.173297,0.16729,0.161693,0.156464,0.151568,0.146973,0.142653,0.138583,0.134742,0.131111,0.127673,0.124413,0.121317,0.118374,0.115571,0.1129,0.110351,0.107915,0.105586,0.103356,0.10122,0.0991707,0.0972037,0.095314,0.093497,0.0917487,0.0900651,0.0884428,0.0868784};
    y[1] = 1;
    for(int j=1;j<=50;j++){
        int count = 1;
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+h*pow(y1[j],2))/(1+2*h*y1[j]);
            temp = y1[j];

        }cout<<y1[j]<<endl;


        y[j+1] = temp;

    }return 0;

}

float semiImplicit1(float h){
    float temp;
    float y[100];
    float y1[51] = {0.8,0.672,0.581683,0.514012,0.46117,0.418635,0.383584,0.354156,0.329071,0.307414,0.288513,0.271865,0.257083,0.243865,0.231971,0.221208,0.211422,0.202482,0.194282,0.186733,0.179759,0.173297,0.16729,0.161693,0.156464,0.151568,0.146973,0.142653,0.138583,0.134742,0.131111,0.127673,0.124413,0.121317,0.118374,0.115571,0.1129,0.110351,0.107915,0.105586,0.103356,0.10122,0.0991707,0.0972037,0.095314,0.093497,0.0917487,0.0900651,0.0884428,0.0868784};
    y[1] = 1;
    for(int j=1;j<=50;j++){
        int count = 1;
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+((h/2)*(pow(y[j],2)+pow(y1[j],2))))/(1+h*y1[j]);
            temp = y1[j];

        }cout<<y1[j]<<endl;
        y[j+1] = temp;

    }return 0;

}


float NRimplicit2(float h){
    float temp;
    float y[500];
    float y1[101] =  {0.9,0.819,0.751924,0.695385,0.647029,0.605164,0.568542,0.536218,0.507465,0.481713,0.458508,0.437485,0.418346,0.400844,0.384777,0.369972,0.356284,0.34359,0.331784,0.320776,0.310487,0.300846,0.291796,0.283281,0.275256,0.26768,0.260514,0.253728,0.24729,0.241175,0.235358,0.229819,0.224537,0.219495,0.214678,0.210069,0.205656,0.201427,0.197369,0.193474,0.189731,0.186131,0.182666,0.17933,0.176114,0.173012,0.170019,0.167128,0.164335,0.161634,0.159022,0.156493,0.154044,0.151671,0.149371,0.14714,0.144975,0.142873,0.140832,0.138848,0.13692,0.135046,0.133222,0.131447,0.129719,0.128036,0.126397,0.1248,0.123242,0.121723,0.120242,0.118796,0.117384,0.116007,0.114661,0.113346,0.112061,0.110806,0.109578,0.108377,0.107203,0.106053,0.104929,0.103828,0.10275,0.101694,0.10066,0.0996464,0.0986535,0.0976802,0.0967261,0.0957905,0.0948729,0.0939728,0.0930897,0.0922231,0.0913726,0.0905377,0.089718,0.0889131};
    y[1] = 1;
    for(int j=1;j<=100;j++){
        int count = 1;
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+h*pow(y1[j],2))/(1+2*h*y1[j]);
            temp = y1[j];


        }cout<<y1[j]<<endl;

        y[j+1] = temp;

    }return 0;

}

float semiImplicit2(float h){
    float temp;
    float y[500];
    float y1[101] =  {0.9,0.819,0.751924,0.695385,0.647029,0.605164,0.568542,0.536218,0.507465,0.481713,0.458508,0.437485,0.418346,0.400844,0.384777,0.369972,0.356284,0.34359,0.331784,0.320776,0.310487,0.300846,0.291796,0.283281,0.275256,0.26768,0.260514,0.253728,0.24729,0.241175,0.235358,0.229819,0.224537,0.219495,0.214678,0.210069,0.205656,0.201427,0.197369,0.193474,0.189731,0.186131,0.182666,0.17933,0.176114,0.173012,0.170019,0.167128,0.164335,0.161634,0.159022,0.156493,0.154044,0.151671,0.149371,0.14714,0.144975,0.142873,0.140832,0.138848,0.13692,0.135046,0.133222,0.131447,0.129719,0.128036,0.126397,0.1248,0.123242,0.121723,0.120242,0.118796,0.117384,0.116007,0.114661,0.113346,0.112061,0.110806,0.109578,0.108377,0.107203,0.106053,0.104929,0.103828,0.10275,0.101694,0.10066,0.0996464,0.0986535,0.0976802,0.0967261,0.0957905,0.0948729,0.0939728,0.0930897,0.0922231,0.0913726,0.0905377,0.089718,0.0889131};
    y[1] = 1;
    for(int j=1;j<=100;j++){
        int count = 1;
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+((h/2)*(pow(y[j],2)+pow(y1[j],2))))/(1+h*y1[j]);
            temp = y1[j];
        }cout<<y1[j]<<endl;
        y[j+1] = temp;

    }return 0;
}

float NRimplicit3(float h){
    float temp;
    float y[500];
    float y1[21] = {0.5,0.375,0.304688,0.25827,0.224918,0.199624,0.179699,0.163553,0.150179,0.138902,0.129255,0.120902,0.113593,0.107141,0.101402,0.0962605,0.0916274,0.0874297,0.0836077,0.0801126};
    y[1] = 1;
    for(int j=1;j<=20;j++){
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+h*pow(y1[j],2))/(1+2*h*y1[j]);
            temp = y1[j];
        }cout<<y1[j]<<endl;
        y[j+1] = temp;

    }return 0;

}

float semiImplicit3(float h){
    float temp;
    float y[500];
    float y1[21] = {0.5,0.375,0.304688,0.25827,0.224918,0.199624,0.179699,0.163553,0.150179,0.138902,0.129255,0.120902,0.113593,0.107141,0.101402,0.0962605,0.0916274,0.0874297,0.0836077,0.0801126};
    y[1] = 1;
    for(int j=1;j<=20;j++){
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+((h/2)*(pow(y[j],2)+pow(y1[j],2))))/(1+h*y1[j]);
            temp = y1[j];
        }cout<<y1[j]<<endl;
        y[j+1] = temp;

    }return 0;

}


float NRimplicit4(float h){
    float temp;
    float y[500];
    float y1[11] = {0,0,0,0,0,0,0,0,0,0};
    y[1] = 1;
    for(int j=1;j<=10;j++){
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+h*pow(y1[j],2))/(1+2*h*y1[j]);
            temp = y1[j];
        }cout<<y1[j]<<endl;
        y[j+1] = temp;
    }return 0;

}
float semiImplicit4(float h){
    float temp;
    float y[500];
    float y1[11] = {0,0,0,0,0,0,0,0,0,0};
    y[1] = 1;
    for(int j=1;j<=10;j++){
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+((h/2)*(pow(y[j],2)+pow(y1[j],2))))/(1+h*y1[j]);
            temp = y1[j];
        }cout<<y1[j]<<endl;
        y[j+1] = temp;

    }return 0;

}

float NRimplicit5(float h){
    float temp;
    float y[500];
    float y1[6] = {-1,-3,-21,-903,-1.63E+06};
    y[1] = 1;
    for(int j=1;j<=5;j++){
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+h*pow(y1[j],2))/(1+2*h*y1[j]);
            temp = y1[j];
        }cout<<y1[j]<<endl;
        y[j+1] = temp;
    }return 0;

}
float semiImplicit5(float h){
    float temp;
    float y[500];
    float y1[6] = {1,-1,-3,-21,-903,-1.63E+06};
    y[1] = 1;
    for(int j=1;j<=5;j++){
        for(int i=1;i<=10;i++){
            y1[j] = y1[j] - (y1[j]-y[j]+((h/2)*(pow(y[j],2)+pow(y1[j],2))))/(1+h*y1[j]);
            temp = y1[j];
        }cout<<y1[j]<<endl;
        y[j+1] = temp;

    }return 0;

}

float eulerexplicit(float h,float N){
    float value;
    float x = 1;
    for(int i=1;i<=N;i++){
        x = x - h*pow(x,2);
        cout<<x<<endl;
    }
    return 0;
}



int main(){
    cout<<"euler explicit for h=0.1 : "<<endl;
    cout<<eulerexplicit(0.1,100)<<endl;
    cout<<"euler explicit for h=0.2 : "<<endl;
    cout<<eulerexplicit(0.2,50)<<endl;
    cout<<"euler explicit for h=0.5 : "<<endl;
    cout<<eulerexplicit(0.5,20)<<endl;
    cout<<"euler explicit for h=1 : "<<endl;
    cout<<eulerexplicit(1,10)<<endl;
    cout<<"euler explicit for h=2 : "<<endl;
    cout<<eulerexplicit(2,5)<<endl;

    cout<<"-----------------------------------------------"<<endl;

    cout<<"euler implicit for h=0.2 : "<<endl;
    cout<<NRimplicit1(0.2)<<endl;
    cout<<"euler implicit for h=0.1 : "<<endl;
    cout<<NRimplicit2(0.1)<<endl;
    cout<<"euler implicit for h=0.5 : "<<endl;
    cout<<NRimplicit3(0.5)<<endl;
    cout<<"euler implicit for h=1 : "<<endl;
    cout<<NRimplicit4(1)<<endl;
    cout<<"euler implicit for h=2 : "<<endl;
    cout<<NRimplicit5(2)<<endl;

    cout<<"-----------------------------------------------"<<endl;

    cout<<"Crank-Nicholson for h=0.2 : "<<endl;
    cout<<semiImplicit1(0.2)<<endl;
    cout<<"Crank-Nicholson for h=0.1 : "<<endl;
    cout<<semiImplicit2(0.1)<<endl;
    cout<<"Crank-Nicholson for h=0.5 : "<<endl;
    cout<<semiImplicit3(0.5)<<endl;
    cout<<"Crank-Nicholson for h=1 : "<<endl;
    cout<<semiImplicit4(1)<<endl;
    cout<<"Crank-Nicholson for h=2 : "<<endl;
    cout<<semiImplicit5(2)<<endl;

return 0;
}
